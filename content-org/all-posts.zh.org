#+STARTUP: overview
#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: zh/posts
#+AUTHOR:
#+HUGO_CUSTOM_FRONT_MATTER: :author "<a href='https://k4i.top' class='theme-link'>k4i</a>"

* DONE 关于
  CLOSED: [2021-11-23 Tue 16:16]
:PROPERTIES:
:EXPORT_HUGO_SECTION: zh/
:EXPORT_HUGO_BUNDLE: about
:EXPORT_FILE_NAME: index
:EXPORT_DATE: [2021-11-23 Tue 15:32]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image "/images/icons/tortoise.png"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :libraries '(mathjax)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :description "about k4i"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :type "about"
:END:

[[../static/images/about/the-matrix-has-you.gif]]

** :triangular_flag_on_post: 关于本站

使用[[https://gohugo.io/][Hugo]]生成，博客源码在[[https://github.com/sky-bro/blog-src][blog-src]], 主题fork([[https://github.com/sky-bro/hugo-theme-zzo][my fork]])自: [[https://github.com/zzossig/hugo-theme-zzo][hugo-theme-zzo]].

另外现在不直接编辑 ~.md~ 文件了, 而是先编辑 ~.org~ 文件 (保存到了
[[https://github.com/sky-bro/blog-src/tree/master/content-org][blog-src/content-org]]), 然后用[[https://ox-hugo.scripter.co/][ox-hugo]]导出到 ~.md~.

** :sunrise: 我的日常

   + [[http://www.hit.edu.cn/][@哈工大]]
   + C/C++, Golang, Python, ASM
   + Arch, Eamcs, VSCode
   + CTF, ACM

** :love_letter: 联系我

   + 邮件: [[mailto:sky_io@outlook.com][sky_io@outlook.com]]
   + 微信: sky_bro
   + 脸书: [[https://www.facebook.com/profile.php?id=100005027239118][Kaiyu Shi]]
   + 推特: [[https://twitter.com/KaiyuShi][KaiyuShi]]
   + GPG公钥: [[/Kyle.asc][Kyle.asc]] (F4CD 0E4A 3661 65D1 62E6  B6CE 7D36 AE60 55B0 60A6)

** :chicken: 我的朋友

[[https://thesong96.github.io/][TheSong]], [[http://lurenxiao1998.github.io/][路人枭]], [[https://pullp.github.io][wxk]]

** :musical_score: 最近在听

[[https://open.spotify.com/user/22sit26j5lamlvm3sgikxwuoq][<img src="https://spotify-readme-ky13.vercel.app/api/spotify" alt="Kyle
Listening" />]]

* DONE Tiling WM (i3)                                             :@notes:wm:
  CLOSED: [2021-12-04 Sat 22:36]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: tiling-wm--i3
:EXPORT_FILE_NAME: index
:EXPORT_DATE: [2021-12-02 Thu 10:57]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image "/images/icons/i3wm-logo.png"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :libraries '(mathjax)
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :description "notes on i3 tiling wm."
:END:

** 什么是窗口管理器

窗口管理器 (Window Manager) 就是用来管理窗口的. 主要分为两大类:

*** Stacking WM:

每个窗口都可以拖拽, 改变大小, 窗口之间可以有重叠, 主要靠鼠标控制.

比如下图, Stacking WM的屏幕利用率比较低, 而且操作严重依赖鼠标, 比较慢.

[[../static/images/posts/Tiling WM/stacking-wm-example.jpeg]]

*** Tiling WM:

窗口不能拖拽, 窗口之间没有重叠, 像瓷砖一样铺满屏幕, 配合很多快捷键使用, 基本不或
者少依赖鼠标进行控制.

- 自动放置窗口, 不重叠, 空间利用率高
- 多种布局方式切换, 适应各种需求 (基本所有tiling wm都不止Tiling一种布局, 比如i3wm还有Tabbed, Stacked, 还可以选择让某窗口全屏或是悬浮)
- 基本全靠键盘控制, 快速方便

[[../static/images/posts/Tiling WM/tiling-wm-example.jpeg]]

** 理解container与tree

#+html: {{< alert theme="warning" >}}
我这里并没有严格去看源码这个树到底是怎么构建的(尤其是很多特殊情况), 不过就简单理解下树和窗口之间的关系是可以的.
#+html: {{< /alert >}}

大多窗口管理器采用树结构来保存窗口, i3也是如此.

每个workspace的所有窗口保存在一个tree数据结构里面, 这个tree的每个节点都是一个 container (window算特殊的container, 是没有孩子的叶子节点), 一个container里面又可以包含多个container.

*** container属性

每个container有两个比较重要的属性:

**** 布局方式

split (分splith, splitv), tabbed 或者 stacked

#+CAPTION: tree of ambiguous layout
#+NAME: fig:tiling-wm-ambiguous-layout
[[../static/images/posts/Tiling WM/tiling-wm-ambiguous-layout.svg]]

图 [[fig:tiling-wm-ambiguous-layout]] 代表的窗口可能是图 [[fig:possible-window-status-01]], 也可能是图 [[fig:possible-window-status-02]]或者其他的, 因为我们不知道每个container内部的窗口布局方式. 所以窗口管理器会为每个节点保存布局方式, 表示内部的孩子节点应该按照什么方式放置.

#+CAPTION: possible window status 01
#+NAME: fig:possible-window-status-01
[[../static/images/posts/Tiling WM/possible-window-status-01.svg]]

#+CAPTION: possible window status 02
#+NAME: fig:possible-window-status-02
[[../static/images/posts/Tiling WM/possible-window-status-02.svg]]

所以如果想只代表图 [[fig:possible-window-status-01]] 中的窗口, 那么应该为container增加布局方式属性, 如图 [[fig:tiling-wm-ambiguous-layout]] 所示.

#+CAPTION: tree of unambiguous layout
#+NAME: fig:tiling-wm-unambiguous-layout
[[../static/images/posts/Tiling WM/tiling-wm-unambiguous-layout.svg]]

**** split方向对应占多少百分比

因为我们通常还会控制每个窗口/容器的宽度/高度, 所以还应该为每个容器增加split方向的空间占比, 如图 [[fig:tiling-wm-percentage]] 所示.

#+CAPTION: tree with container percentage
#+NAME: fig:tiling-wm-percentage
[[../static/images/posts/Tiling WM/tiling-wm-percentage.svg]]

*** 练习与理解

为了理解我们在操作窗口时对应tree的构造, 我们将窗口/容器都放在另一个设为tabbed或
者stacked布局的容器内 -- *因为这两种布局才会显示标题*.

1. 切换到一个没有任何窗口的workspace: 如 =$Mod+3=.
2. 用 =$Mod+e= 设置默认的布局为split(水平/垂直), (一般不会设为tabbed或stacked).
3. =$Mod+ENTER= 打开一个terminal (我这里是st, 或者任何别的窗口也行).
4. =$Mod+w/s= 设置所在container布局为tabbed或stacked
5. =$Mod+v/V= 新建一个垂直/水平split布局的container包裹当前的st窗口
   - 在节点(container或window)所在container只有一个窗口, 且container布局方式为水平/垂直split时, =$Mod+v/V= 只会切换split方向
   - 当节点所在container不止一个窗口, 或者container布局方式为tabbed或者stacked时, =$Mod+v/V= 会创建一个新的垂直/水平split布局的container包裹当前节点
6. 后续在这个stabbed或者stacked container下操作就可以看到标题了

当前看到标题应该为 =V[st]=, 再 =$Mod+ENTER= 之后显示为 =V[st st]=.

#+html: {{< alert theme="info" >}}
Tips:
使用 =$Mod+c= 或者 =$Mod+p= 来选择孩子或父亲节点窗口, 然后对该节点进行操作:
- 创建一个兄弟节点
- 删除/关闭节点窗口 (节点下所有窗口都会被关闭)
- 移动节点窗口
- 修改节点窗口大小
#+html: {{< /alert >}}

** 快捷键设置

这里仅列出了比较重要的快捷键, 我详细的配置放在了github的[[https://github.com/sky-bro/.dotfiles/blob/master/.config/i3/config][.dotfiles]]仓库.

#+begin_src sh
  # some configs from my ~/.config/i3/config
  set $mod Mod4

  set $up k
  set $down j
  set $left h
  set $right l

  # change focus
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right

  # move focused window
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right

  # split in horizontal orientation
  bindsym $mod+Shift+v split h

  # split in vertical orientation
  bindsym $mod+v split v

  # enter fullscreen mode for the focused container
  bindsym $mod+f fullscreen toggle

  # change container layout (stacked, tabbed, toggle split)
  bindsym $mod+s layout stacking
  bindsym $mod+w layout tabbed
  bindsym $mod+e layout toggle split

  # toggle tiling / floating
  bindsym $mod+Shift+space floating toggle

  # change focus between tiling / floating windows
  bindsym $mod+space focus mode_toggle

  # focus the parent container
  bindsym $mod+p focus parent

  # focus the child container
  bindsym $mod+c focus child

  # resize window (you can also use the mouse for that)
  set $resize_step 5

  bindsym $mod+y resize shrink width $resize_step px or $resize_step ppt
  bindsym $mod+i resize grow height $resize_step px or $resize_step ppt
  bindsym $mod+u resize shrink height $resize_step px or $resize_step ppt
  bindsym $mod+o resize grow width $resize_step px or $resize_step ppt

#+end_src

- /*Mod-h/j/k/l*/ :: 切换到左/上/下/右边窗口
- /*Mod-S-h/j/k/l*/ :: 移动窗口/容器
- /*Mod-y/u/i/o*/ :: 调整窗口/容器大小
- /*Mod-v*/ :: *增加一个container* 存放当前focused window(或者container), 容器内采用垂直split布局
- /*Mod-S-v*/ :: 同上, 不过容器内采用水平split布局
- /*Mod-e/w/s*/ :: 设置 *所在container* 的布局为Split(会在splith, splitv间循环), Tabbed, Stacked
- /*Mod-p*/ :: Focus parent
- /*Mod-c*/ :: Focus child

** 参考

- [[https://i3wm.org/docs/userguide.html#_tree][i3wm 用户手册 >> tree]]
- [[https://www.youtube.com/watch?v=Api6dFMlxAA][youtube: TheAlternative.ch - LinuxDays FS16 - Linux for Experts course]]
- [[https://en.wikipedia.org/wiki/Window_manager#Types][wiki: window manager types]]
* DONE 做自己, 纯粹一点                                   :reflection:@diary:
CLOSED: [2023-04-05 Wed 21:58]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: 做自己-纯粹一点
:EXPORT_FILE_NAME: index
:EXPORT_DATE: [2023-04-05 Wed 21:46]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :description "做个纯粹的人."
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-04-05 Wed 21:58]
:END:

发现工作快一年了, 上班时间似乎没有百分百投入, 下班时间大部分是在玩手机或者玩游戏. 整个人似乎浑浑噩噩度过每一天, 没有去收拾房间, 打扫卫生, 出门晒太阳, 学习感兴趣的知识.

现在是清明节的晚上快十点钟, 想要改变自己, 做人纯粹一点, 兴趣纯粹一点, 做事明确一点, 我不喜欢沉浸在某些不感兴趣的东西里面(打游戏, 刷无聊的视频等).

首先决定把一些软件卸载掉:
- 炉石卸载(手机 + 电脑)
- 微信discover除了朋友圈都关闭(朋友圈可能还是无法关掉, 这样就完全无法获取朋友们的讯息了)
- 抖音注销 + 卸载
- b站卸载

未来把自己的精力集中一点, 实在无聊就出门去锻炼吧, 或者躺着睡觉.
* DONE Sweep Bling LP 矮轴分体键盘                          :sweep:@keyboard:
CLOSED: [2024-05-25 Sat 22:01]
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: sweep-bling-lp-矮轴分体键盘
:EXPORT_FILE_NAME: index
:EXPORT_DATE: [2024-05-25 Sat 19:54]
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :image "/images/icons/sweep-split-kbd.jpg"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :description "my awesome split keyboard: sweep bling lp"
:END:
:LOGBOOK:
- State "DONE"       from "TODO"       [2024-05-25 Sat 22:01]
:END:

** 分体键盘介绍/如何选择分体键盘

*** 选择键盘固件

zmk官网有对常见键盘固件功能的对比: [[https://zmk.dev/docs][zmk features]], 我自己没有接触过除zmk的其它固件, 冲分体和蓝牙多设备我直接选择了zmk, 而且感觉zmk社区也比较活跃.


#+caption: 固件功能对比
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/keyboard-firmware-features.png]]

*** 选择多少键位的分体

[[https://zmk.dev/docs/hardware#composite][zmk: supported hardware > composite keyboards]]中列举了很多分体键盘方案. 不过比较出名的主要有下面这些

**** [[https://github.com/foostan/crkbd/][corne]]

3\times6或3\times5的配列, 3个拇指键, 个人觉得拇指键两个就够了, 多一个太靠近掌心很难按, 支持屏幕.

#+caption: corne
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-corne.jpg]]

#+REVEAL: split

也有一些corne的变体, 比如[[https://www.reddit.com/r/mechmarket/comments/jyfrv2/ic_the_corneish_zen_a_low_profile_wireless_split/][corne-ish zen]], 支持了墨水屏.

#+caption: corne-ish zen
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-corne-ish-zen.jpg]]

**** [[https://github.com/davidphilipbarr/Sweep][sweep]]

sweep采用3\times5的配列, 两个拇指键, 不支持屏幕, 不需要二极管, 焊接简单. 最重要的是我觉得官方文档写得很好.

3\times5配列我也觉得是最合适的配列, 充分利用切层, 让所有手指移动距离保持在一个键以内.

#+caption: my sweep bling lp
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-sweep-bling-lp.jpg]]

**** [[https://github.com/kata0510/Lily58][Lily58]]

Lily58从名字就看出一共58个按键, 4\times6配列, 个人觉得按键比较冗余了, 尤其最下面一排不知道是交给拇指按(太靠近掌心不好按)还是中间三根手指按(列不对齐有点奇怪).

#+caption: lily58
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-lily58.jpg]]

**** [[https://github.com/josefadamcik/SofleKeyboard][Sofle]]

和Lily58类似, 一共58个按键, 4\times6配列, 多了两个编码器键(encoder).

#+caption: sofle
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-sofle.jpg]]

**** [[https://github.com/mattdibi/redox-keyboard][Redox]]

多少键已经数不清楚了, 而且这个拇指键就有点疯狂了, 以前两个拇指按一个空格太清闲, 现在充分利用起来是吧...

#+caption: Redox
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-redox.jpg]]

** 硬件部分(sweep bling lp)

我最终选择了sweep键盘, 因为他有比较好的文档, 而且焊接简单(不需要二极管), 外观小巧精致.


#+caption: sweep bling lp物料表
[[file:../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-sweep-bling-lp-components.png]]

*** PCB

从[[https://github.com/davidphilipbarr/Sweep/tree/main/Sweep%20Bling%20LP/gerbers][github: Sweep Bling LP gerbers]]下载gerbers文件, 然后用它到[[https://www.jlc.com/newOrder/#/pcb/newOnlinePlaceOrder][嘉立创PCB下单]].

#+caption: 嘉立创PCB下单
[[file:../static/images/posts/sweep-bling-lp-矮轴分体键盘/jlc-pcb-order.png]]

*** 主控

按照官网所说需要两块兼容promicro的或nice!nano主控, 淘宝搜索promicro nrf52840或nice!nano, 睫毛外设店和无名科技Nologo应该比较火.

**** 排针 & 排母

通过排针排母可以让我们的主控变成可插拔的, 未来如果想换别的键盘非常方便.

选择2.54mm间距12 pin的排针排母, 选择12 pin这样就不用回来再掰了, 排针比较好掰不选12还好, 但是排母最好选12 pin的.

**** 电池

主控可以靠usb或者电池供电, 想要无线使用那么电池必须有.

排针排母把主控架起来, 和PCB板间有个空间可以放电池, 淘宝搜索601235有300mah的电池, 这基本是能放下的最大的电池了.

**** 开关

需要一个开关来控制电池对主控供电. 根据官方所说的型号MSK 12C02搜索.

#+caption: 电源和开关
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-battery-and-switch.jpg]]

*** 按键

按键分为三个部分, 从下到上依次是: 轴座, 键轴, 键帽. 兼容性需要根据选择的PCB来.

sweep bling lp需要使用凯华的矮轴轴座 + 键轴 + 键帽. 矮轴个人用其来觉得比较舒服, 但小众, 价格比MX轴贵, 选择范围小.

**** 轴座

轴座可以让我们的键轴变为可插拔的, 未来想要尝试不同的键轴很方便.

淘宝搜索凯华 轴座 1350.

**** 键轴

我目前只尝试过白轴和粉轴, 白轴听起来比较清脆, 但可能吵到别人; 粉轴特别轻, 也比较安静, 适合在人多的环境使用.

淘宝搜索凯华 矮轴 1350.

**** 键帽

键帽可选择的太少了, 我目前只搜到淘宝哈狐外设企业店一个, 别的店也有矮轴, 但是sweep bling lp按键特别紧凑, 键帽安上去上下两排几乎没有空隙. 键帽是1.65cm\times1.65cm的, 别的店我看都比这个大, 会安不下.

*** 外壳

外壳可以网上搜就行, 然后淘宝或别的地方找个3D打印的店帮忙打印下即可.

比如我用的是这个[[https://www.printables.com/model/782368-ferris-sweep-bling-lp][printables: Ferris Sweep Bling LP]], 把stl文件下载下来发给店家.

**** 螺丝

外壳和PCB板一般要靠螺丝固定, 上面这个外壳我用的是4颗4mm长的m2螺丝, 左右手一共8颗螺丝.

**** 橡胶脚垫

外壳放到桌面上一般都会比较滑, 所以还需要用橡胶垫来防滑. 贴的时候注意尽可能贴到角落, 防止按的时候翘起来.

#+caption: 键盘底部用橡胶垫防滑
[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/kbd-rubber-feet.jpg]]

** 软件部分: ZMK固件

参考我的[[https://github.com/sky-bro/zmk-config][zmk-config]]

*** 修改设备名字

给自己的键盘起个独特的名字, 名字限制16个字符长.

*** 电量查看

有两种方式, 第一种是官方固件已经支持配置分体键盘电量上报, 可以看到左右手的电量. 只需要修改下配置文件;

第二种是使用自定义的behavior, 绑定一个快捷键直接把电量输出出来.

[[../static/images/posts/sweep-bling-lp-矮轴分体键盘/custom-battery-report-behavior.gif]]

*** 鼠标模拟

目前还没有合入主干, 可以自己合下代码用一下: [[https://github.com/zmkfirmware/zmk/pull/2027][pr 2027]].

这个功能主要是针对少量的鼠标操作, 大量的操作还是直接用鼠标方便.

** 打个广告

兄弟姐妹们如果不想自己组装也可以移步咸鱼, 搜索 =k4i_top= 找我直接购买, 备注博客或者b站: [[https://space.bilibili.com/356650397/channel/collectiondetail?sid=2323692&ctype=0][分体键盘视频合集]]来的可以优惠 :)
